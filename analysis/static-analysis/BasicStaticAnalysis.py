import os
from subprocess import Popen, PIPE
import pefile

class BasicStaticAnalysis:
    def __init__(self, file):
        self.file = file
        self.pe = pefile.PE(file)
        self.config = config    
        
    def GetStrings(self):
        process = Popen(["strings",self.file], stdout=PIPE, stderr=PIPE)
        strings, stderr = process.communicate()
        return strings.split(b"\n")

    def GetExports(self):
        exports = []
        try:
            for exp_sym in self.pe.DIRECTORY_ENTRY_EXPORT.symbols:
                exports.append([exp_sym.name, hex(self.pe.OPTIONAL_HEADER.ImageBase + exp_sym.address)])
        except:
            pass    
        return exports

    def GetImports(self):
        imports = {}
        try:
            for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
                imports[entry.dll] = []
                for _import in entry.imports:
                    imports[entry.dll].append([_import.name, hex(int(_import.address))])
        except:
            pass
        return imports

    def GetSections(self):
        sections = []
        for section in self.pe.sections:
            sections.append([
                section.Name,
                hex(section.VirtualAddress),
                hex(section.Misc_VirtualSize),
                hex(section.SizeOfRawData),
                section.get_entropy()
            ])

        return sections

    def Static(self):

        strings = self.GetStrings()
        sections = self.GetSections()
        imports = self.GetImports()
        exports = self.GetExports()