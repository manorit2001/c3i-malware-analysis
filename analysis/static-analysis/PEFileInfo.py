import pefile
import hashlib
from datetime import datetime

class PEFileInfo:
	def __init__(self, pe_file):
		self.file = pe_file
		self.pe = pefile.PE(file)

	def GetTimeStamp(self):
		try:
			pe_timestamp = self.pe.FILE_HEADER.TimeDateStamp
		except:
			return None

		dt = datetime.datetime.fromtimestamp(pe_timestamp)
		return dt.strftime("%Y-%m-%d %H:%M:%S")

	def GetHashes(self):
		hash_md5 = hashlib.md5()
		hash_sha1 = hashlib.sha1()
		hash_sha256 = hashlib.sha256()
		with open(fname, "rb") as f:
			for chunk in iter(lambda: f.read(4096), b""):
				hash_sha256.update(chunk)
				hash_sha1.update(chunk)
				hash_md5.update(chunk)

		return [hash_sha256.hexdigest(),hash_md5.hexdigest(),hash_sha1.hexdigest()]

	def GetMetadata(self):
		process = Popen(["exiftool",self.file], stdout=PIPE, stderr=PIPE)
		metadata, stderr = process.communicate()
		return metadata.split(b"\n").decode("utf-8")

	def GetFileInfo(self):
		process = Popen(["file",self.file], stdout=PIPE, stderr=PIPE)
		file_info , stderr = process.communicate()
		return file_info.split(b"\n").decode("utf-8")

	def GetImpHash(self):
		try:
			return self.pe.get_imphash()
		except:
			return None

	def GetVersionInfo(self):
		version_info = []
		if(hasattr(self.pe, "VS_VERSIONINFO")):
			if(hasattr(self.pe, "FileInfo")):
				for entry in self.pe.FileInfo:
					try:
						if(hasattr(entry, "StringTable")):
							for st_entry in entry.StringTable:
								for str_entry in st_entry.entries.items():
									entry = {}
									entry["name"] = convert_to_printable(str_entry[0])
									entry["value"] = convert_to_printable(str_entry[1])
									version_info.append(entry)
						elif(hasattr(entry, "Var")):
							for var_entry in entry.Var:
								if hasattr(var_entry, "entry"):
									entry = {}
									entry["name"] = convert_to_printable(var_entry.entry.keys()[0])
									entry["value"] = convert_to_printable(var_entry.entry.values()[0])
									version_info.append(entry)
					except:
						pass

		return version_info

	def GetResorceSection(self):
		for section in self.pe.sections:
			if(".rsrc" in sectons.Name.rstrip("\x00")):
				return section.get_data()

	def GetHiddenFiles(self):
		process = Popen(["file",self.file], stdout=PIPE, stderr=PIPE)
		hidden_files, stderr = process.communicate()
		return hidden_files.split(b"\n").decode("utf-8")
	