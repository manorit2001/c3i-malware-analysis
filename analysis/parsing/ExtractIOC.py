from scapy.all import *


class ExtractIOC:
	def __init__(self,file):
		self.file = file
		pass
	def parse_network(self,file):
		dns_dst = set()
		tcp_dst = set()
		udp_dst = set()
		IOC = open(self.file,"a")
		pcap = rdpcap(file)
		dns = []
		for packet in pcap[DNS]:
			if(packet.haslayer(DNSRR)):
				if(packet.an.type == 1):
					dns_dst.add(packet.an.rdata)

		for packet in pcap[TCP]:
			if("192.168" not in packet.dst and "127.0" not in packet.dst):
				tcp_dst.add(packet.dst)

		for packet in pcap[UDP]:
			if("192.168" not in packet.dst and "127.0" not in packet.dst):
				udp_dst.add(packet.dst)

		tcp = tcp_dst.difference(dns_dst)
		udp = udp_dst.difference(dns_dst)
		ips = tcp.union(udp)
		IOC.write("\n NETWORK INDICATORS\n\n")
		IOC.write(''.join(ip + "\n" for ip in ips))

	def SaveKeys(self,snapshot):
		registry_keys = {}
		for keys in snapshot:
			keys = keys.split(b"\r\n")
			key_name = keys[0]
			registry_keys[key_name] = []
			keys.pop(0)
			for key in keys:
				if(key != b""):
					registry_keys[key_name].append(key)
		return registry_keys

	def parse_registry(self,file):
		registry_changes = {}
		changes = open(file,"wb")
		IOC = open(self.file,"wb")
		for i in range(5):
			before = open("regshot_before"+str(i+1),"rb")
			after = open("regshot_after"+str(i+1),"rb")
			
			snapshot_1 = before.read()[2:].split(b"\r\n\r\n")
			snapshot_2 = after.read()[2:].split(b"\r\n\r\n")
			
			registry_keys_1 = self.SaveKeys(snapshot_1)
			registry_keys_2 = self.SaveKeys(snapshot_2)
			
			extra_keys = [key for key in registry_keys_2.keys() if key not in registry_keys_1.keys()]
			deleted_keys = [key for key in registry_keys_1.keys() if key not in registry_keys_2.keys()]
			common_keys = [key for key in registry_keys_1.keys() if key in registry_keys_2.keys()]
			IOC.write(b"Keys Added\n\n")
			IOC.write(b''.join(key+b"\n" for key in extra_keys))
			changes.write(b"Keys Added\n\n")
			for key in extra_keys:
				changes.write(key+b"\n")
				changes.write(b''.join(value+b"\n" for value in registry_keys_2[key]))
				
			IOC.write(b"Keys Deleted\n\n")
			IOC.write(b''.join(key+b"\n" for key in deleted_keys))
			changes.write(b"Keys Deleted\n\n")
			for key in deleted_keys:
				changes.write(key+b"\n")
				changes.write(b''.join(value+b"\n" for value in registry_keys_1[key]))

			IOC.write(b"Keys Changed\n\n")
			changes.write(b"Keys Changed\n\n")
			for key in common_keys:
				if(registry_keys_1[key] != registry_keys_2[key]):
					IOC.write(key+b"\n")
					changes.write(key+b"\n")
					for value_1,value_2 in zip(registry_keys_1[key],registry_keys_2[key]):
						if(value_1 != value_2):
							changes.write(b"Before -> " + value_1 + b"\n")
							changes.write(b"After -> "+ value_2 + b"\n")
					if(len(registry_keys_1[key]) < len(registry_keys_2[key])):
						changes.write(b"\nAdded Values\n" + b''.join(value + b"\n" for value in registry_keys_2[key] if value not in registry_keys_1[key]))
						changes.write(b"\n")
					if(len(registry_keys_1[key]) > len(registry_keys_2[key])):
						changes.write(b"\nDeleted Values\n" + b''.join(value + b"\n" for value in registry_keys_1[key] if value not in registry_keys_2[key]))
						changes.write(b"\n")
			before.close()
			after.close()


IOC = ExtractIOC("IOC")

IOC.parse_registry("registry_changes")
IOC.parse_network("example.pcap")