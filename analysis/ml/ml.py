import os
from zipfile import ZipFile
import numpy as np
from xml.etree import ElementTree as ET
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report
from sklearn.ensemble import RandomForestClassifier
import joblib
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from tqdm import tqdm
import pandas as pd
import tensorflow as tf
from tensorflow.keras import layers

data_dir = "/content/drive/MyDrive/results/unzipped/"

all_ops = ['CloseFile',
 'CreateFile',
 'CreateFileMapping',
 'DeviceIoControl',
 'FileSystemControl',
 'Load Image',
 'LockFile',
 'NotifyChangeDirectory',
 'Process Create',
 'Process Exit',
 'Process Start',
 'QueryAllInformationFile',
 'QueryAttributeInformationVolume',
 'QueryAttributeTagFile',
 'QueryBasicInformationFile',
 'QueryCaseSensitiveInformation',
 'QueryDirectory',
 'QueryEAFile',
 'QueryFileInternalInformationFile',
 'QueryIdInformation',
 'QueryInformationVolume',
 'QueryNameInformationFile',
 'QueryNetworkOpenInformationFile',
 'QueryNormalizedNameInformationFile',
 'QueryRemoteProtocolInformation',
 'QuerySecurityFile',
 'QuerySizeInformationVolume',
 'QueryStandardInformationFile',
 'QueryStreamInformationFile',
 'ReadFile',
 'RegCloseKey',
 'RegCreateKey',
 'RegDeleteKey',
 'RegDeleteValue',
 'RegEnumKey',
 'RegEnumValue',
 'RegLoadKey',
 'RegOpenKey',
 'RegQueryKey',
 'RegQueryKeySecurity',
 'RegQueryMultipleValueKey',
 'RegQueryValue',
 'RegSetInfoKey',
 'RegSetKeySecurity',
 'RegSetValue',
 'SetBasicInformationFile',
 'SetRenameInformationFile',
 'SetStorageReservedIdInformation',
 'Thread Create',
 'Thread Exit',
 'UnlockFileSingle',
 'WriteFile']

def create_vector_from_file(xmlF):
    tree = ET.parse(xmlF)
    root = tree.getroot()
    processes = root[0]
    events = root[1]

    inp = np.zeros(shape=(len(all_ops)))

    for i in events:
        op = i[4].text
        try:
            ind2 = all_ops.index(op)
        except ValueError:
            continue
        inp[ind2]+=1

    return inp

def create_dataset(data_dir):
    X = []
    y = []
    dirs = os.listdir(data_dir)
    for i in dirs:
        x = os.listdir(data_dir+i)
        for j in tqdm(x):
            f_p = os.path.join(data_dir, i, j, "apimon.xml")
            if ( not os.path.isfile(f_p)):
              print("Invalid File ",f_p)
            else:
                kk = create_vector_from_file(f_p)
                X.append(kk)
            if i == "malware":
                y.append(1)
            else:
                y.append(0)

    return 0

def preprocess(X, y):
    mms = MinMaxScaler()
    x = mms.fit_transform(X)
    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=40)
    return [X_train, X_test, y_train, y_test]

def train(X,Y):
    clf = RandomForestClassifier(random_state=0)
    clf.fit(X, Y)
    return clf

def train_nn(X,Y):
    model = tf.keras.models.Sequential()

    ds = tf.data.Dataset.from_tensors((X,Y))

    model.add(layers.Dense(50, input_shape=(71,), activation='relu'))
    model.add(layers.Dense(25, activation='relu'))
    model.add(layers.Dense(1, activation='sigmoid'))
    model.compile(loss='binary_crossentropy', optimizer='adam')

    model.fit(ds, epochs=20, batch_size=32)

    return model

def classification_results(model, x_test,y_test):
    y_preds = model.predict(y_test)
    return classification_report(y_preds,y_test)
