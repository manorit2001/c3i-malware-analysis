import subprocess
from pathlib import Path
from subprocess import PIPE

import yara


class SignatureBasedDetection:

    rules_path = Path("deps/rules")
    signature_path = Path("deps/signatures")
    yara_files = [
        "malware_index.yar",
        "packers_index.yar",
        "antidebug_antivm_index.yar",
    ]
    signature_files = ["main.cvd", "daily.cvd"]

    def __init__(self, file):
        self.file = file

    def YaraBasedDetection(self):
        rules = []
        results = {}
        for file in self.yara_files:
            full_file_path = self.rules_path / file
            full_file_path = full_file_path.absolute().resolve()
            rules.append(yara.compile(str(full_file_path)))
            results[file.split("_index")[0]] = []

        for key, rule in zip(results.keys(), rules):
            results[key] = rule.match(self.file)

        return results

    def ClamAVBasedDetection(self):

        results = []

        for file in self.signature_files:
            res = subprocess.run(
                ["clamscan", "-d", str(self.signature_path / file), self.file],
                stdout=PIPE,
                stderr=PIPE,
            ).stdout
            results.append(res)

        return results

    def run(self, SaveFile):

        file = open(SaveFile, "w")
        file.write("YARA BASED DETECTION\n\n")

        results = self.YaraBasedDetection()

        for key in results:
            file.write("\n" + key + "\n\n")
            for detection in results[key]:
                file.write(str(detection) + "\n")

        file.write("\nCLAMAV BASED DETECTION\n\n")
        results = self.ClamAVBasedDetection()
        for result in results:
            file.write(result.decode("utf-8"))
