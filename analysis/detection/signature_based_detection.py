import hashlib


class SignatureBasedDetection:
    def __init__(self, file):
        self.file = file

    def _hash(self, fname):
        hash_md5 = hashlib.md5()
        hash_sha1 = hashlib.sha1()
        hash_sha256 = hashlib.sha256()
        with open(fname, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)
                hash_sha1.update(chunk)
                hash_md5.update(chunk)

        return [hash_sha256.hexdigest(), hash_md5.hexdigest(), hash_sha1.hexdigest()]

    def computeLPSArray(self, _str, _len):
        lps = [0] * _len
        lps[0] = 0
        i = 1
        j = 0
        while i < _len:
            if _str[i] == _str[j]:
                j += 1
                lps[i] = j
                i += 1
            else:
                if j != 0:
                    j = lps[j - 1]
                else:
                    lps[i] = 0
                    i += 1

        return lps

    def KMPSearch(self, pat, txt):
        pat_len = len(pat)
        txt_len = len(txt)
        lps = self.computeLPSArray(pat, pat_len)
        i = 0
        j = 0
        while i < txt_len:
            if pat[j] == txt[i]:
                i += 1
                j += 1
            if j == pat_len:
                return True

            elif i < txt_len and pat[j] != txt[i]:
                if j != 0:
                    j = lps[j - 1]
                else:
                    i += 1
        return False

    def BodyDetection(self):
        signature_file = open("main.ndb")
        txt = open(self.file, "rb")
        while True:
            signature = signature_file.readline()
            if not signature:
                txt.close()
                return False
            else:
                signature = bytes.fromhex(signature.split(":")[-1].split("\n")[0])
                if self.KMPSearch(signature, txt.read()):
                    txt.close()
                    return True

    def HashDetection(self):
        signature_file = open("main.hsb")
        hashes = self._hash(self.file)
        while True:
            signature = signature_file.readline()

            if not signature:
                return False
            else:
                signature = signature.split(":")[0]
                if len(signature) == 64:
                    if hashes[0] == signature:
                        return True
                elif len(signature) == 32:
                    if hashes[1] == signature:
                        return True
                else:
                    if hashes[2] == signature:
                        return True
