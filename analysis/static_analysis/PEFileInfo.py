import pefile
import hashlib
from datetime import datetime
from subprocess import Popen, PIPE


class PEFileInfo:
    def __init__(self, pe_file):
        self.file = pe_file
        self.pe = pefile.PE(pe_file)

    def GetTimeStamp(self):
        try:
            pe_timestamp = self.pe.FILE_HEADER.TimeDateStamp
        except:
            return None

        dt = datetime.fromtimestamp(pe_timestamp)
        return dt.strftime("%Y-%m-%d %H:%M:%S")

    def GetHashes(self):
        hash_md5 = hashlib.md5()
        hash_sha1 = hashlib.sha1()
        hash_sha256 = hashlib.sha256()
        with open(self.file, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)
                hash_sha1.update(chunk)
                hash_md5.update(chunk)

        return [hash_sha256.hexdigest(), hash_md5.hexdigest(), hash_sha1.hexdigest()]

    def GetMetadata(self):
        process = Popen(["exiftool", self.file], stdout=PIPE, stderr=PIPE)
        metadata, stderr = process.communicate()
        return metadata

    def GetFileInfo(self):
        process = Popen(["file", self.file], stdout=PIPE, stderr=PIPE)
        file_info, stderr = process.communicate()
        return file_info

    def GetImpHash(self):
        try:
            return self.pe.get_imphash()
        except:
            return None

    def GetVersionInfo(self):
        version_info = []
        if hasattr(self.pe, "VS_VERSIONINFO"):
            if hasattr(self.pe, "FileInfo"):
                for entry in self.pe.FileInfo:
                    try:
                        if hasattr(entry, "StringTable"):
                            for st_entry in entry.StringTable:
                                for str_entry in st_entry.entries.items():
                                    entry = {}
                                    entry["name"] = str_entry[0]
                                    entry["value"] = str_entry[1]
                                    version_info.append(entry)
                        elif hasattr(entry, "Var"):
                            for var_entry in entry.Var:
                                if hasattr(var_entry, "entry"):
                                    entry = {}
                                    entry["name"] = var_entry.entry.keys()[0]
                                    entry["value"] = var_entry.entry.values()[0]
                                    version_info.append(entry)
                    except:
                        pass

        return version_info

    def GetResourceSection(self):
        for section in self.pe.sections:
            if b".rsrc" in section.Name.rstrip(b"\x00"):
                return section.get_data()

    def GetHiddenFiles(self):
        process = Popen(["file", self.file], stdout=PIPE, stderr=PIPE)
        hidden_files, stderr = process.communicate()
        return hidden_files

    def run(self, file):
        save = open(file, "wb")
        save.write(b"Hashes\n\n")
        hashes = self.GetHashes()
        save.write(
            b"SHA-256 :"
            + hashes[0].encode("utf-8")
            + b"\n"
            + b"MD-5 :"
            + hashes[1].encode("utf-8")
            + b"\n"
            + b"SHA-1 :"
            + hashes[2].encode("utf-8")
            + b"\n"
        )
        save.write(b"\nMETADATA\n\n")
        save.write(self.GetMetadata())
        save.write(b"\nIMPHASH\n\n")
        save.write(self.GetImpHash().encode("utf-8") + b"\n")
        save.write(b"\nHIDDEN FILES\n\n")
        save.write(self.GetHiddenFiles() + b"\n")
        save.write(b"\nFILE INFO\n\n")
        save.write(self.GetFileInfo() + b"\n")
        save.write(b"\nTIME STAMP\n\n")
        save.write(self.GetTimeStamp().encode("utf-8") + b"\n")
        save.write(b"\nVERSION INFO\n\n")
        version_info = self.GetVersionInfo()
        if version_info != []:
            for info in self.GetVersionInfo():
                try:
                    save.write(b"name : " + info["name"] + "\n")
                    save.write(b"value : " + info["value"] + "\n")
                except:
                    break
        else:
            save.write(b"None\n")

        save.write(b"\nRESOURCE\n\n")
        resourse = b" ".join(
            "{:02x}".format(c).encode("utf-8") for c in self.GetResourceSection()
        )
        save.write(resourse)
        save.close()
