import hashlib
import json
import re
import subprocess
from datetime import datetime
from subprocess import PIPE

import pefile


class PEFileInfo:
    def __init__(self, pe_file):
        self.file = pe_file
        self.pe = pefile.PE(pe_file)

    def GetTimeStamp(self):
        try:
            pe_timestamp = self.pe.FILE_HEADER.TimeDateStamp
        except:
            return None

        dt = datetime.fromtimestamp(pe_timestamp)
        return dt.strftime("%Y-%m-%d %H:%M:%S")

    def GetHashes(self):
        hash_md5 = hashlib.md5()
        hash_sha1 = hashlib.sha1()
        hash_sha256 = hashlib.sha256()
        with open(self.file, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)
                hash_sha1.update(chunk)
                hash_md5.update(chunk)

        return [hash_sha256.hexdigest(), hash_md5.hexdigest(), hash_sha1.hexdigest()]

    def GetMetadata(self):
        metadata = subprocess.run(
            ["exiftool", self.file], stdout=PIPE, stderr=PIPE
        ).stdout
        metadata = metadata.decode("utf-8").strip().split("\n")
        metadata_dict = {}
        for data in metadata:
            split_data = data.split(":")
            metadata_dict[split_data[0].strip()] = split_data[1].strip()

        return metadata_dict

    def GetFileInfo(self):
        file_info = subprocess.run(["file", self.file], stdout=PIPE, stderr=PIPE).stdout
        return file_info.decode("utf-8")

    def GetImpHash(self):
        try:
            return self.pe.get_imphash()
        except:
            return None

    def GetVersionInfo(self):
        version_info = []
        if hasattr(self.pe, "VS_VERSIONINFO"):
            if hasattr(self.pe, "FileInfo"):
                for entry in self.pe.FileInfo:
                    try:
                        if hasattr(entry, "StringTable"):
                            for st_entry in entry.StringTable:
                                for str_entry in st_entry.entries.items():
                                    entry = {}
                                    entry["name"] = str_entry[0].decode("utf-8")
                                    entry["value"] = str_entry[1].decode("utf-8")
                                    version_info.append(entry)
                        elif hasattr(entry, "Var"):
                            for var_entry in entry.Var:
                                if hasattr(var_entry, "entry"):
                                    entry = {}
                                    entry["name"] = var_entry.entry.keys()[0].decode(
                                        "utf-8"
                                    )
                                    entry["value"] = var_entry.entry.values()[0].decode(
                                        "utf-8"
                                    )
                                    version_info.append(entry)
                    except:
                        pass

        return version_info

    def GetResourceSection(self):
        for section in self.pe.sections:
            if b".rsrc" in section.Name.rstrip(b"\x00"):
                return section.get_data()

    def GetHiddenFiles(self):
        hidden_files = subprocess.run(
            ["binwalk", self.file], stdout=PIPE, stderr=PIPE
        ).stdout
        hidden_files_data = hidden_files.decode("utf-8").split("\n")[3:-2]
        pattern = re.compile("[\s]{2,}")
        hidden_files_list = []
        for data in hidden_files_data:
            data = re.sub(pattern, "\n", data)
            offset = data.split("\n")[1]
            file_type = data.split("\n")[2]
            hidden_files_list.append([offset, file_type])

        return hidden_files_list

    def run(self, file):
        pefile_data_dict = {
            "METADATA": self.GetMetadata(),
            "HASHSES": self.GetHashes(),
            "IMPHASH": self.GetImpHash(),
            "HIDDEN-FILES": self.GetHiddenFiles(),
            "FILE-INFO": self.GetFileInfo(),
            "TIME-STAMP": self.GetTimeStamp(),
            "VERSION-INFO": self.GetVersionInfo(),
            "RESOURSE-SECTION": " ".join(
                "{:02x}".format(c) for c in self.GetResourceSection()
            ),
        }
        json_data = json.dumps(pefile_data_dict, indent=4)
        with open(file, "w") as save:
            save.write(json_data)
