import json
import logging
import subprocess
from pathlib import Path
from subprocess import PIPE

import yara


class SignatureBasedDetection:

    rules_path = Path("deps/rules")
    signature_path = Path("deps/signatures")
    yara_files = [
        "malware_index.yar",
        "packers_index.yar",
        "antidebug_antivm_index.yar",
    ]
    signature_files = ["main.cvd", "daily.cvd"]

    def __init__(self, file):
        self.file = file

    def YaraBasedDetection(self):
        rules = []
        results = {}
        for file in self.yara_files:
            full_file_path = self.rules_path / file
            full_file_path = full_file_path.absolute().resolve()
            rules.append(yara.compile(str(full_file_path)))
            results[file.split("_index")[0]] = []

        for key, rule in zip(results.keys(), rules):
            results[key] = str(rule.match(self.file))

        return results

    def ClamAVBasedDetection(self):

        results = []

        for file in self.signature_files:
            if (
                subprocess.run(
                    ["which", "clamscan"],
                    stderr=subprocess.DEVNULL,
                    stdout=subprocess.DEVNULL,
                ).returncode
                == 0
            ):
                logging.info(f"{file}: running clamAV detection")
                res = subprocess.run(
                    ["clamscan", "-d", str(self.signature_path / file), self.file],
                    stdout=PIPE,
                    stderr=PIPE,
                ).stdout
                results.append(res)
            else:
                logging.warning(f"{file}: clamscan not found")

        return results

    def run(self, yara_save_file, clamav_save_file):

        signature_analysis_data_dict = {
            "YARA-BASED-DETECTION": self.YaraBasedDetection()
        }
        json_data = json.dumps(signature_analysis_data_dict, indent=4)

        with open(yara_save_file, "w") as file:
            file.write(json_data)

        # Execute ClamAV scan and get the results

        results = self.ClamAVBasedDetection()

        with open(clamav_save_file, "wb") as file:
            for result in results:
                file.write(result)
