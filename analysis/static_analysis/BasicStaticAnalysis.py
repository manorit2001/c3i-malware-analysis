import json
import os
import subprocess
from subprocess import PIPE

import pefile


class BasicStaticAnalysis:
    def __init__(self, file):
        self.file = file
        self.pe = pefile.PE(file)

    def GetStrings(self):
        strings = subprocess.run(
            ["strings", self.file], stdout=PIPE, stderr=PIPE
        ).stdout
        return strings.decode("utf-8").split("\n")

    def GetExports(self):
        exports = []
        try:
            for exp_sym in self.pe.DIRECTORY_ENTRY_EXPORT.symbols:
                exports.append(
                    [
                        exp_sym.name.decode("utf-8"),
                        hex(self.pe.OPTIONAL_HEADER.ImageBase + exp_sym.address),
                    ]
                )
        except:
            pass
        return exports

    def GetImports(self):
        imports = {}
        try:
            for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
                imports[entry.dll.decode("utf-8")] = []
                for _import in entry.imports:
                    imports[entry.dll.decode("utf-8")].append(
                        [_import.name.decode("utf-8"), hex(int(_import.address))]
                    )
        except:
            pass
        return imports

    def GetSections(self):
        sections = []
        for section in self.pe.sections:
            sections.append(
                [
                    section.Name.decode("utf-8").rstrip("\x00"),
                    hex(section.VirtualAddress),
                    hex(section.Misc_VirtualSize),
                    hex(section.SizeOfRawData),
                ]
            )

        return sections

    def run(self, file):
        analysis_data_dict = {
            "Strings": self.GetStrings(),
            "Sections": self.GetSections(),
            "Exports": self.GetExports(),
            "Imports": self.GetImports(),
        }
        json_data = json.dumps(analysis_data_dict, indent=4)
        with open(file, "w") as save:
            save.write(json_data)
