import os
from subprocess import Popen, PIPE
import pefile

class BasicStaticAnalysis:
    def __init__(self, file):
        self.file = file
        self.pe = pefile.PE(file)
        
    def GetStrings(self):
        process = Popen(["strings",self.file], stdout=PIPE, stderr=PIPE)
        strings, stderr = process.communicate()
        return strings

    def GetExports(self):
        exports = []
        try:
            for exp_sym in self.pe.DIRECTORY_ENTRY_EXPORT.symbols:
                exports.append([exp_sym.name, hex(self.pe.OPTIONAL_HEADER.ImageBase + exp_sym.address)])
        except:
            pass    
        return exports

    def GetImports(self):
        imports = {}
        try:
            for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
                imports[entry.dll] = []
                for _import in entry.imports:
                    imports[entry.dll].append([_import.name, hex(int(_import.address))])
        except:
            pass
        return imports

    def GetSections(self):
        sections = []
        for section in self.pe.sections:
            sections.append([
                section.Name,
                hex(section.VirtualAddress),
                hex(section.Misc_VirtualSize),
                hex(section.SizeOfRawData),
            ])

        return sections

    def run(self, file):
        save = open(file, "wb")
        save.write(b"Strings\n\n")
        save.write(self.GetStrings())
        sections = self.GetSections()
        save.write(b"--------------------")
        save.write(b"\nSections\n\n\n")
        for section in sections:
            save.write(section[0].rstrip(b"\x00")+b"\n"+section[1].encode("utf-8")+b"\n"+section[2].encode("utf-8")+b"\n"+section[3].encode("utf-8")+b"\n\n")
        
        save.write(b"--------------------")
        save.write(b"\nImports\n\n\n")
        imports = self.GetImports()
    
        for dll in imports.keys():
            save.write(dll + b"\n\n")
            for _import in imports[dll]:
                save.write(_import[0] + b":" + _import[1].encode("utf-8") + b"\n")
            save.write(b"\n")

        exports = self.GetExports()
        save.write(b"--------------------")
        save.write(b"\nEXPORTS\n\n\n")
        for _export in exports:
            save.write(_export[0] + b"\n" + _export[1] + b"\n")

