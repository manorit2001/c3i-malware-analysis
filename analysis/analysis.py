from pathlib import Path
from subprocess import PIPE, Popen

from parsing_IOC.ExtractIOC import ExtractIOC
from static_analysis.BasicStaticAnalysis import BasicStaticAnalysis
from static_analysis.DetectAntiTechniques import DetectAntiTechniques
from static_analysis.PackerDetection import PackerDetection
from static_analysis.PEFileInfo import PEFileInfo
from static_analysis.Report import Report
from static_analysis.signature_based_detection import SignatureBasedDetection

# needed in DetectAntiTechniques and PackerDetection
report = Report("static-analysis.txt")

# Malacious process that got detected must be stored in files and all these file names should be stored in "FilesToBeAnalysed" file

files_dir = Path("files")

files = files_dir.rglob("*")

output_dir = Path("results")
output_dir.mkdir(parents=True, exist_ok=True)
process_dir = output_dir / "parsed_dumps" / "process"

extract_ioc = ExtractIOC()
extract_ioc.run(log_dir="logs", output_dir=output_dir)

for file in files:
    file_name = file.name.split(".")[0]
    api_log = open(process_dir / file.name, "r")
    data = api_log.read().split("\n\n")
    api_log.close()
    data.pop(0)
    ApiHooks = []
    ApiCalls = set()
    for apicall in data:
        apicall = apicall.split("\n")
        if apicall[0] != "":
            ApiHooks.append(apicall)
            ApiCalls.add(apicall[0])

    # DETECT ANTI TECHNIQUES

    detect_anti_techniques = DetectAntiTechniques(files_dir / file.name, report)
    detect_anti_techniques.run(ApiCalls, ApiHooks)

    # BASIC STATIC ANALYSIS

    basic_static_analysis = BasicStaticAnalysis(files_dir / file.name)
    basic_static_analysis.run(
        output_dir / "BasicStaticAnalysis_{}.txt".format(file_name)
    )

    # PACKER DETECTION

    packer_detection = PackerDetection(files_dir / file.name, report)
    packer_detection.run()

    # LOGGING TO THE FILE

    with open(output_dir / "report_{}.txt".format(file_name), "w") as report_file:
        report_file.write("DETECTIONS\n\n")

        for detection in report.GetDetections():
            report_file.write(detection + "\n")

        report_file.write("\nSUSPICIONS\n\n")

        for suspicion in report.GetSuspicions():
            report_file.write(suspicion + "\n")

    # PEFILE INFO

    pe_file_info = PEFileInfo(files_dir / file.name)
    pe_file_info.run(output_dir / "PEFileInfo_{}.txt".format(file_name))

    # # Signature Based Detection using clamAV and Yara

    signature = SignatureBasedDetection(str(files_dir / file.name))

    # SIGNATURE BASED DETECTION
    signature.run(output_dir / "signature_{}.txt".format(file_name))
