from pathlib import Path

from detection.signature_based_detection import SignatureBasedDetection
from parsing_IOC.ExtractIOC import ExtractIOC
from static_analysis.BasicStaticAnalysis import BasicStaticAnalysis
from static_analysis.PEFileInfo import PEFileInfo

# from static_analysis.DetectAntiTechniques import DetectAntiTechniques
# from static_analysis.PackerDetection import PackerDetection
# from static_analysis.Report import Report

# needed in DetectAntiTechniques and PackerDetection
# report = Report("static-analysis.txt")

file = "static_analysis/monitoring.exe"  # TEST

output_dir = Path("outputs")
output_dir.mkdir(parents=True, exist_ok=True)

basic_static_analysis = BasicStaticAnalysis(file)
basic_static_analysis.run(output_dir / "BasicStaticAnalysis.txt")

# WE NEED <ApiCalls> FOR RUNNING THIS
# detect_anti_techniques = DetectAntiTechniques(report, <ApiCalls>)
# report_file = open("report", "w")
# report_file.write("DETECTIONS\n\n")
#
# for detection in report.GetDetections():
#     report_file.write(detection + "\n")
#
# report_file.write("\nSUSPICIONS\n\n")
#
# for suspicion in report.GetSuspicions():
#     report_file.write(suspicion + "\n")


pe_file_info = PEFileInfo(file)
pe_file_info.run(output_dir / "PEFileInfo.txt")

# WE NEED <pe> for running this
# packer_detection = PackerDetection()
# packer_detection.run(<pe>, report)

extract_ioc = ExtractIOC()
extract_ioc.run(log_dir="logs", output_dir=output_dir)

signature = SignatureBasedDetection(file)

print("Signature Detection using Hash: {}".format(signature.HashDetection()))
print("Signature Detection using Body: {}".format(signature.BodyDetection()))
