import json
import logging
from pathlib import Path
from subprocess import PIPE

from parsing.parsing_dumps import ParsingDumps
from static_analysis.BasicStaticAnalysis import BasicStaticAnalysis
from static_analysis.DetectAntiTechniques import DetectAntiTechniques
from static_analysis.PackerDetection import PackerDetection
from static_analysis.PEFileInfo import PEFileInfo
from static_analysis.Report import Report
from static_analysis.signature_based_detection import SignatureBasedDetection

# needed in DetectAntiTechniques and PackerDetection
report = Report("static-analysis.txt")

logging.basicConfig(
    level=logging.DEBUG,
    format="[%(asctime)s][%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()],
)

# Malacious process that got detected must be stored in files and all these file names should be stored in "FilesToBeAnalysed" file

files_dir = Path("files")

files = files_dir.rglob("*")

output_dir = Path("results")
output_dir.mkdir(parents=True, exist_ok=True)

process_dir = output_dir / "parsed_dumps" / "process"
base_dir = output_dir / "static_analysis"

parse_data = ParsingDumps()
parse_data.run(log_dir="logs", output_dir=output_dir)

for file in files:
    file_name = file.name.split(".")[0]

    file_directory = base_dir / file_name
    file_directory.mkdir(parents=True, exist_ok=True)

    ApiCalls = set()
    with open(process_dir / f"{file_name}.json", "r") as api_log:

        data = json.loads(api_log.read())

        ApiHooks = data["Events"]
        for apicall in ApiHooks:
            ApiCalls.add(apicall[0])

    # DETECT ANTI TECHNIQUES

    detect_anti_techniques = DetectAntiTechniques(files_dir / file.name, report)
    detect_anti_techniques.run(ApiCalls, ApiHooks)

    # BASIC STATIC ANALYSIS

    basic_static_analysis = BasicStaticAnalysis(files_dir / file.name)
    basic_static_analysis.run(file_directory / "basic_static_analysis.json")

    # PACKER DETECTION

    packer_detection = PackerDetection(files_dir / file.name, report)
    packer_detection.run()

    # MAKING A JSON REPORT

    report_dict = {
        "[DETECTIONS]": report.GetDetections(),
        "[SUSPICIONS]": report.GetSuspicions(),
    }
    json_report = json.dumps(report_dict, indent=4)

    # LOGGING TO THE FILE

    with open(file_directory / "report.json", "w") as report_file:
        report_file.write(json_report)

    # PEFILE INFO

    pe_file_info = PEFileInfo(files_dir / file.name)
    pe_file_info.run(file_directory / "pe_file_info.json")

    # Signature Based Detection using clamAV and Yara

    signature = SignatureBasedDetection(str(files_dir / file.name))

    # SIGNATURE BASED DETECTION
    signature.run(
        file_directory / "yara_signature_based_analysis.json",
        file_directory / "clamav_signature_based_analysis.txt",
    )

logging.info(f"Analysis is done, you can find the files at {output_dir.absolute()}")
