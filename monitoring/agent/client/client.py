import configparser
import datetime
from pathlib import Path
import logging
import os
import subprocess
import sys
from elevate import elevate

import requests

logging.basicConfig(
    level=logging.DEBUG,
    format="[%(asctime)s][%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()],
)


def send_file(api, file_path):
    logging.info(f"Sending file {file_path}")
    if not file_path.exists():
        logging.exception(f"file doesn't exist {file_path}")
    else:
        with open(file_path, "rb") as f:
            r = requests.post(api + "/upload", files={"file": f})
            if r.ok:
                print("uploaded")


"""
usage: python3 client.py <path-to-malware>
"""
if __name__ == "__main__":
    elevate()

    config = configparser.ConfigParser()
    config.read("config.ini")

    api = config["DEFAULT"]["API_URL"]
    log_dir = Path(config["DEFAULT"]["LOG_DIR"]) / "Monitoring"
    exe_path = Path(config["DEFAULT"]["EXE_PATH"])
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    cur_monitoring_folder = log_dir / timestamp

    # update the list of files when anything added to monitoring engine
    list_of_files = ["log.etl", "procmon.out", "etw.etl", "log.cab"]

    for j in ["before", "after"]:
        list_of_files += []
        for i in range(1, 6):
            list_of_files += [f"regshot_{j}{i}"]

    if log_dir.exists() and not log_dir.is_dir():
        logging.error("LOG_DIR path is not a directory")

    if not cur_monitoring_folder.exists():
        logging.info(f"Creating log_dir {cur_monitoring_folder}")
        cur_monitoring_folder.mkdir(parents=True)

    cmd = [str(exe_path), str(cur_monitoring_folder)]
    logging.debug(sys.argv)
    if len(sys.argv) == 2:
        cmd += [str(Path(sys.argv[1]))]
    logging.info(f"Running command {cmd}")
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        logging.info("Cleaning up corrupted logs")
        for file in list_of_files:
            try:
                fullpath = cur_monitoring_folder / file
                fullpath.unlink()
                logging.info(f"deleted {str(fullpath)}")
            except:
                pass
        cur_monitoring_folder.rmdir()
        sys.exit(1)

    for file in list_of_files:
        full_path = cur_monitoring_folder / file
        send_file(api, full_path)
        if config["DEFAULT"].getboolean("AUTO_DEL", False):
            full_path.unlink()

    if config["DEFAULT"].getboolean("AUTO_DEL", False):
        cur_monitoring_folder.rmdir()
