#include "eventsink.h"
class Procmon {
	HRESULT hres;
	IWbemServices* pSvc = NULL;
	IWbemLocator* pLoc = NULL;
	IUnsecuredApartment* pUnsecApp = NULL;
	IWbemObjectSink* pStubSink = NULL;
	IUnknown* pStubUnk = NULL;
	EventSink* pSink;
public:
	Procmon(string fame) {
		hres = NULL;
		pSink = new EventSink(fame);
	}
	bool start() {
		// Step 1: --------------------------------------------------
		// Initialize COM. ------------------------------------------

		hres = CoInitializeEx(0, COINIT_MULTITHREADED);
		if (FAILED(hres))
		{
			cout << "Failed to initialize COM library. Error code = 0x"
				<< hex << hres << endl;
			return 1;                  // Program has failed.
		}

		// Step 2: --------------------------------------------------
		// Set general COM security levels --------------------------

		hres = CoInitializeSecurity(
			NULL,
			-1,                          // COM negotiates service
			NULL,                        // Authentication services
			NULL,                        // Reserved
			RPC_C_AUTHN_LEVEL_DEFAULT,   // Default authentication 
			RPC_C_IMP_LEVEL_IMPERSONATE, // Default Impersonation  
			NULL,                        // Authentication info
			EOAC_NONE,                   // Additional capabilities 
			NULL                         // Reserved
		);


		if (FAILED(hres))
		{
			cout << "Failed to initialize security. Error code = 0x"
				<< hex << hres << endl;
			CoUninitialize();
			return 1;                      // Program has failed.
		}

		// Step 3: ---------------------------------------------------
		// Obtain the initial locator to WMI -------------------------


		hres = CoCreateInstance(
			CLSID_WbemLocator,
			0,
			CLSCTX_INPROC_SERVER,
			IID_IWbemLocator, (LPVOID*)&pLoc);

		if (FAILED(hres))
		{
			cout << "Failed to create IWbemLocator object. "
				<< "Err code = 0x"
				<< hex << hres << endl;
			CoUninitialize();
			return 1;                 // Program has failed.
		}

		// Step 4: ---------------------------------------------------
		// Connect to WMI through the IWbemLocator::ConnectServer method


		// Connect to the local root\cimv2 namespace
		// and obtain pointer pSvc to make IWbemServices calls.
		hres = pLoc->ConnectServer(
			_bstr_t(L"ROOT\\CIMV2"),
			NULL,
			NULL,
			0,
			NULL,
			0,
			0,
			&pSvc
		);

		if (FAILED(hres))
		{
			cout << "Could not connect. Error code = 0x"
				<< hex << hres << endl;
			pLoc->Release();
			CoUninitialize();
			return 1;                // Program has failed.
		}

		cout << "Procmon started" << endl;


		// Step 5: --------------------------------------------------
		// Set security levels on the proxy -------------------------

		hres = CoSetProxyBlanket(
			pSvc,                        // Indicates the proxy to set
			RPC_C_AUTHN_WINNT,           // RPC_C_AUTHN_xxx 
			RPC_C_AUTHZ_NONE,            // RPC_C_AUTHZ_xxx 
			NULL,                        // Server principal name 
			RPC_C_AUTHN_LEVEL_CALL,      // RPC_C_AUTHN_LEVEL_xxx 
			RPC_C_IMP_LEVEL_IMPERSONATE, // RPC_C_IMP_LEVEL_xxx
			NULL,                        // client identity
			EOAC_NONE                    // proxy capabilities 
		);

		if (FAILED(hres))
		{
			cout << "Could not set proxy blanket. Error code = 0x"
				<< hex << hres << endl;
			pSvc->Release();
			pLoc->Release();
			CoUninitialize();
			return 1;               // Program has failed.
		}

		// Step 6: -------------------------------------------------
		// Receive event notifications -----------------------------

		// Use an unsecured apartment for security

		hres = CoCreateInstance(CLSID_UnsecuredApartment, NULL,
			CLSCTX_LOCAL_SERVER, IID_IUnsecuredApartment,
			(void**)&pUnsecApp);

		pSink->AddRef();

		pUnsecApp->CreateObjectStub(pSink, &pStubUnk);

		pStubUnk->QueryInterface(IID_IWbemObjectSink,
			(void**)&pStubSink);

		// The ExecNotificationQueryAsync method will call
		// The EventQuery::Indicate method when an event occurs
		hres = pSvc->ExecNotificationQueryAsync(
			_bstr_t("WQL"),
			_bstr_t("SELECT * "
				"FROM __InstanceOperationEvent WITHIN 1 "
				"WHERE TargetInstance ISA 'Win32_Process'"),
			WBEM_FLAG_SEND_STATUS,
			NULL,
			pStubSink);

		// Check for errors.
		if (FAILED(hres))
		{
			printf("ExecNotificationQueryAsync failed "
				"with = 0x%X\n", hres);
			pSvc->Release();
			pLoc->Release();
			pUnsecApp->Release();
			pStubUnk->Release();
			pSink->Release();
			pStubSink->Release();
			CoUninitialize();
			return 1;
		}
		return 0;
	}
	void stop() {
		hres = pSvc->CancelAsyncCall(pStubSink);

		// Cleanup
		// ========

		pSvc->Release();
		pLoc->Release();
		pUnsecApp->Release();
		pStubUnk->Release();
		pSink->Release();
		pStubSink->Release();
		CoUninitialize();

		cout << "Procmon stop";
	}
};