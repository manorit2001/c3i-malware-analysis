// EventSink.cpp
#include "eventsink.h"

ULONG EventSink::AddRef()
{
    return InterlockedIncrement(&m_lRef);
}

ULONG EventSink::Release()
{
    LONG lRef = InterlockedDecrement(&m_lRef);
    if (lRef == 0)
        delete this;
    return lRef;
}

HRESULT EventSink::QueryInterface(REFIID riid, void** ppv)
{
    if (riid == IID_IUnknown || riid == IID_IWbemObjectSink)
    {
        *ppv = (IWbemObjectSink*)this;
        AddRef();
        return WBEM_S_NO_ERROR;
    }
    else return E_NOINTERFACE;
}


HRESULT EventSink::Indicate(long lObjectCount,
    IWbemClassObject** apObjArray)
{
    HRESULT hr = S_OK;
    _variant_t vtProp;

    for (int i = 0; i < lObjectCount; i++)
    {
        bool CreateorDel = false;
        _variant_t cn;
        hr = apObjArray[i]->Get(_bstr_t(L"__Class"), 0, &cn, 0, 0);
        if (SUCCEEDED(hr))
        {
            wstring LClassStr(cn.bstrVal);
            if (0 == LClassStr.compare(L"__InstanceDeletionEvent"))
            {
                fcout <<endl << "Process Terminated" << endl;
                CreateorDel = true;
            }
            else if (0 == LClassStr.compare(L"__InstanceCreationEvent"))
            {
                fcout << endl << "Process Created" << endl;
                CreateorDel = true;
            }
            else
            {
                CreateorDel = false;
                //fcout << "Modification " << endl;             
            }
        }
        VariantClear(&cn);

        if (CreateorDel) {
            hr = apObjArray[i]->Get(_bstr_t(L"TargetInstance"), 0, &vtProp, 0, 0);
            if (!FAILED(hr))
            {
                IUnknown* str = vtProp;
                hr = str->QueryInterface(IID_IWbemClassObject, reinterpret_cast<void**>(&apObjArray[i]));
                if (SUCCEEDED(hr))
                {
                    _variant_t cn;
                    hr = apObjArray[i]->Get(L"Caption", 0, &cn, NULL, NULL);
                    if (SUCCEEDED(hr))
                    {
                        if ((cn.vt == VT_NULL) || (cn.vt == VT_EMPTY))
                            fcout << "Caption : " << ((cn.vt == VT_NULL) ? "NULL" : "EMPTY") << endl;
                        else
                            if ((cn.vt & VT_ARRAY))
                                fcout << "Caption : " << "Array types not supported (yet)" << endl;
                            else
                                fcout << "Caption : " << utf8_encode(static_cast<wstring>(cn.bstrVal)) << endl;
                    }
                    VariantClear(&cn);

                    hr = apObjArray[i]->Get(L"CommandLine", 0, &cn, NULL, NULL);
                    if (SUCCEEDED(hr))
                    {
                        if ((cn.vt == VT_NULL) || (cn.vt == VT_EMPTY))
                            fcout << "CommandLine : " << ((cn.vt == VT_NULL) ? "NULL" : "EMPTY") << endl;
                        else
                            if ((cn.vt & VT_ARRAY))
                                fcout << "CommandLine : " << "Array types not supported (yet)" << endl;
                            else
                                fcout << "CommandLine : " << utf8_encode(static_cast<wstring>(cn.bstrVal)) << endl;
                    }
                    VariantClear(&cn);

                    hr = apObjArray[i]->Get(L"Handle", 0, &cn, NULL, NULL);
                    if (SUCCEEDED(hr))
                    {
                        if ((cn.vt == VT_NULL) || (cn.vt == VT_EMPTY))
                            fcout << "Handle : " << ((cn.vt == VT_NULL) ? "NULL" : "EMPTY") << endl;
                        else
                            if ((cn.vt & VT_ARRAY))
                                fcout << "Handle : " << "Array types not supported (yet)" << endl;
                            else
                                fcout << "Handle : " << utf8_encode(static_cast<wstring>(cn.bstrVal)) << endl;
                    }
                    VariantClear(&cn);


                }
            }
            VariantClear(&vtProp);
        }
    }

    return WBEM_S_NO_ERROR;
}

HRESULT EventSink::SetStatus(
    /* [in] */ LONG lFlags,
    /* [in] */ HRESULT hResult,
    /* [in] */ BSTR strParam,
    /* [in] */ IWbemClassObject __RPC_FAR* pObjParam
)
{
    if (lFlags == WBEM_STATUS_COMPLETE)
    {
        printf("Call complete. hResult = 0x%X\n", hResult);
    }
    else if (lFlags == WBEM_STATUS_PROGRESS)
    {
        printf("Call in progress.\n");
    }

    return WBEM_S_NO_ERROR;
}    // end of EventSink.cpp