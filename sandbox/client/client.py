import configparser
import logging
import subprocess
import time
from dataclasses import dataclass
from pathlib import Path
from urllib.parse import urljoin

import click
import requests


@dataclass
class Config:
    api: str
    upload_dir: str

    @staticmethod
    def get_config():
        config = configparser.ConfigParser()
        config.read("config.ini")
        logging.debug(dict(config["default"]))
        return Config(**dict(config["default"]))


@click.command(help="send malware file for analysis")
@click.argument("path", type=click.Path(exists=True))
def send(path):
    config = Config.get_config()
    with open(path) as f:
        logging.info("Sending malware sample for analysis")
        r = requests.post(urljoin(config.api, "upload"), files={"file": f})
        if r.ok:
            logging.info("Sent successful")
        else:
            logging.error("Some error in sending")


@click.command(help="watch upload directory of agent for the logs")
@click.argument("name", type=click.STRING)
def watch(name):
    config = Config.get_config()
    watch_folder = Path(config.upload_dir) / name
    watch_folder = watch_folder.absolute().resolve()

    file = None

    logging.info(f"Waiting for download to begin in {watch_folder}")
    while True:
        # will just check for first occurrence of the zip file
        file = next(watch_folder.glob("*.zip"), None)

        if file is not None and file.exists():
            # check for download handles associated with
            sub = subprocess.run(["lsof", str(file)], capture_output=True)

            if sub.returncode == 0:
                size = sub.stdout.decode().split("\n")[1].split()[6]

                logging.info(f"{file} is being downloaded: size={size}")
                time.sleep(0.5)
            else:
                logging.info("File download complete")
                break


@click.group()
def main():
    logging.basicConfig(
        level=logging.DEBUG,
        format="[%(asctime)s][%(levelname)s] %(message)s",
        handlers=[logging.StreamHandler()],
    )


main.add_command(send)
main.add_command(watch)

if __name__ == "__main__":
    main()
